--- 
# TinyTapeout project information
project:
  wokwi_id:    374494377414857729        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Joop aan den Toorn"      # Your name
  title:        "Model Railway turntable polarity controller"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "A controller that automatically switches the polarity of DC-type turntables"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      A controller that automatically switches the polarity of DC-type turntables, to prevent short-circuits when rotating the turntable along DC-powered tracks.
      Every track that connects the turntable to the main tracks must include a short, isolated 'sensing track' between the normal tracks and the turntable.
      When the turntable rotates and makes contact with any of the tracks, it powers the sensing element. If the polarity does not match that of the main tracks,
      the turntable polarity controller will invert it.

      This controller is designed to work with a Fleischmann 6152 turntable, using the connecting elements 6153 as sensing elements. The sensing elements must
      be isolated from the main tracks.

      The polarity controller assumes that
      - Every sensing element has two tracks. Both are connected with a high-impedance resistor to the main track they respectively connect to.
      e.g. 
      
      ---------<MAIN TRACK LEFT>---- [ISOLATING CONNECTOR] -----<SENSING TRACK LEFT>------ [TURNTABLE SLDING CONTACTOR] ------<TURNTABLE LEFT TRACK>
       |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   
      ---------<MAIN TRACK RIGHT>--- [ISOLATING CONNECTOR] -----<SENSING TRACK RIGHT>----- [TURNTABLE SLDING CONTACTOR] ------<TURNTABLE RIGHT TRACK>
                                ___
      MAIN TRACK R or L -------|    \
                         |     |     \
                      High R   | XOR  |-----Polarity switch signal
                         |     |     /
      SENSING TRACK R/L--------|___ /

      
      - Every track and corresponding sensing element form two inputs for an external XOR port. when polarity is not equal, the XOR output will
      go from 0 -> 1, which is fed into the polarity controller. Any of the XOR ports can command a change in polarity.
      - The tracks are suitably connected through resistors and (zener) diodes to the XOR ports, to convert to digital signals and prevent an overvoltage on its inputs
      - If the polarity controller receives a high input for prolonged periods of time, it assumes an error state where the turntable is not powered.
      - The turntable polarity controller controls a full-bridge driver that connects the turntable to the main tracks.
      - In the original design, the polarity controller uses 5V control signals to control the full-bridge driver. The setup uses N-channel mosfets,
      where the gate voltage supply is generated by boosting the track voltage. 
      - XOR input circuitry, XOR ports, Full bridge driver, mosfets and gate-voltage supply are all external to
      the polarity controller, but must be implemented if this design is to be used.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Explain how to test your project

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
